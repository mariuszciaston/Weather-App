(()=>{"use strict";var t=function(t,e,n,i){return new(n||(n=Promise))((function(a,r){function o(t){try{s(i.next(t))}catch(t){r(t)}}function c(t){try{s(i.throw(t))}catch(t){r(t)}}function s(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,c)}s((i=i.apply(t,e||[])).next())}))};class e{static getDegreeUnit(t){return"imperial"===t?"°F":"°C"}static convertWindSpeed(t,e){const n=Math.round(3.6*e);return"imperial"===t?`${Math.round(e)} mph`:`${n} km/h`}static getDayOfWeek(t){return["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][new Date(1e3*t).getDay()]}static extractWeatherData(t,e){const{name:n,sys:{country:i},weather:[{main:a,description:r,icon:o}],wind:{speed:c},main:{temp:s,feels_like:d,pressure:u,humidity:l},coord:{lat:h,lon:p}}=t,m=this.getDegreeUnit(e);return{city:n,country:i,icon:o,temperature:`${Math.round(s)}${m}`,feelsLikeTemp:`${Math.round(d)}${m}`,humidityPercent:`${l}%`,windSpeedUnit:this.convertWindSpeed(e,c),pressureUnit:`${u} hPa`,description:r,weather:a,lat:h,lon:p}}static extractNextDays(t,e){const n=[],i=new Date;i.setDate(i.getDate()+1);for(let a=0;a<3;a+=1){const a=`${i.toISOString().split("T")[0]} 12:00:00`,r=t.list.find((t=>t.dt_txt===a));r&&n.push({day:this.getDayOfWeek(r.dt),temp:Math.round(r.main.temp)+this.getDegreeUnit(e),icon:r.weather[0].icon,description:r.weather[0].description}),i.setDate(i.getDate()+1)}return n}static getCurrentPosition(n){return t(this,void 0,void 0,(function*(){try{const t=yield new Promise(((t,e)=>{navigator.geolocation.getCurrentPosition(t,e)})),{latitude:i,longitude:a}=t.coords;return yield e.grabDataByPosition(n,i,a)}catch(t){return alert(t),null}}))}static grabDataByPosition(e,n,i){return t(this,void 0,void 0,(function*(){const t=`https://api.openweathermap.org/geo/1.0/reverse?lat=${n}&lon=${i}&limit=1&appid=2871c88944b81fbab922d47012695ba3`;try{const n=yield fetch(t,{mode:"cors"});if(!n.ok)throw new Error("Localization not found");const i=(yield n.json())[0].name;return this.grabDataByCity(e,i)}catch(t){return alert(t),null}}))}static grabDataByCity(e,n){return t(this,void 0,void 0,(function*(){const i=`https://api.openweathermap.org/data/2.5/weather?q=${n}&units=${e}&appid=2871c88944b81fbab922d47012695ba3`;try{const a=yield new Promise(((e,n)=>t(this,void 0,void 0,(function*(){setTimeout((()=>t(this,void 0,void 0,(function*(){try{const t=yield fetch(i,{mode:"cors"});e(t)}catch(t){n(t)}}))),750)}))));if(!a.ok)throw new Error(`City '${n}' not found`);const r=this.extractWeatherData(yield a.json(),e),o=yield this.grabDataNextDays(e,r.lat,r.lon);return r.nextDays=o,r}catch(t){return alert(t),null}}))}static grabDataNextDays(e,n,i){return t(this,void 0,void 0,(function*(){const t=`https://api.openweathermap.org/data/2.5/forecast?lat=${n}&lon=${i}&units=${e}&appid=2871c88944b81fbab922d47012695ba3`;try{const n=yield fetch(t,{mode:"cors"});if(!n.ok)throw new Error("Localization not found");const i=yield n.json();return this.extractNextDays(i,e)}catch(t){return alert(t),null}}))}}var n=function(t,e,n,i){return new(n||(n=Promise))((function(a,r){function o(t){try{s(i.next(t))}catch(t){r(t)}}function c(t){try{s(i.throw(t))}catch(t){r(t)}}function s(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,c)}s((i=i.apply(t,e||[])).next())}))};class i{static setUnit(t){const e=document.querySelector("#change-units"),n=e.dataset.unit||t||"metric";return this.updateUnitBtn(e,n),n}static updateUnitBtn(t,e){const n=document.querySelector("#change-units span#C"),i=document.querySelector("#change-units span#F");t.dataset.unit=e,n.classList.toggle("bold","metric"===e),i.classList.toggle("bold","imperial"===e)}static toggleUnit(t){const e="metric"===t.dataset.unit?"imperial":"metric";this.updateUnitBtn(t,e),this.replaceUnits(e)}static convertTemperature(t,e){let n=parseFloat(t);return"imperial"===e&&t.includes("°C")?(n=Math.round(9*n/5+32),`${n}°F`):"metric"===e&&t.includes("°F")?(n=Math.round(5*(n-32)/9),`${n}°C`):t}static convertWindSpeed(t,e){let n=parseFloat(t);return"imperial"===e&&t.includes("km/h")?(n=Math.round(n/1.6093),`${n} mph`):"metric"===e&&t.includes("mph")?(n=Math.round(1.6093*n),`${n} km/h`):t}static replaceUnits(t){["#temperature","#feels-like","#wind-speed","#tommorow-card .temp","#after-tommorow-card .temp","#next-card .temp"].forEach((e=>{const n=document.querySelector(e),i=n.textContent,a="#wind-speed"===e;n.textContent=a?this.convertWindSpeed(i,t):this.convertTemperature(i,t)}))}static loading(t){const e=document.querySelector("#loading-spinner");document.querySelector("#weather-container").classList.toggle("hide",t),e.classList.toggle("hide",!t)}static updateUI(t){this.loading(!1),this.clearWeather(),this.displayWeather(t),this.setBcgColor(t)}static pickCity(t){this.loading(!0),t.target.classList.contains("btn")&&e.grabDataByCity(this.setUnit(),t.target.textContent).then((t=>{this.updateUI(t)}))}static searchCity(){const t=document.querySelector("#search-input");t.value=t.value.trim(),""!==t.value&&(this.loading(!0),e.grabDataByCity(this.setUnit(),t.value).then((e=>{t.value="",this.updateUI(e)})).catch((()=>{this.setGreyColor()})))}static findMe(){return n(this,void 0,void 0,(function*(){this.loading(!0);const t=yield e.getCurrentPosition(this.setUnit());t&&this.updateUI(t)}))}static clearWeather(){["main-card","img-card","secondary-card","tommorow-card","after-tommorow-card","next-card"].forEach((t=>{document.querySelector(`#${t}`).textContent=""}))}static displayMainCard(t){const e=document.querySelector("#main-card");["city","temperature","description"].forEach((n=>{if(n in t){const i=document.createElement("h1");i.setAttribute("id","city"===n?"city-country":n),i.textContent=t[n],e.appendChild(i)}})),t.country&&(document.querySelector("#city-country").textContent+=`, ${t.country}`)}static displayImgCard(t){const e=document.querySelector("#img-card"),n=document.createElement("img");n.src=`https://openweathermap.org/img/wn/${t.icon}@4x.png`,n.alt=t.description,e.appendChild(n)}static displaySecondaryCard(t){const e=document.querySelector("#secondary-card"),n=["Feels like: ","Humidity: ","Wind speed: ","Pressure: "],i=[t.feelsLikeTemp,t.humidityPercent,t.windSpeedUnit,t.pressureUnit];["feels-like","humidity","wind-speed","pressure"].forEach(((t,a)=>{const r=document.createElement("p");r.textContent=n[a];const o=document.createElement("span");o.id=t,o.append(` ${i[a]}`),r.appendChild(o),e.appendChild(r)}))}static createElementWithClass(t,e){const n=document.createElement(t);return n.className=e,n}static displayCard(t,e,n){const i=document.querySelector(`#${n}`),a=this.createElementWithClass("p","day"),r=this.createElementWithClass("p","temp"),o=this.createElementWithClass("img","icon");a.textContent=` ${t.nextDays[e].day}`,r.textContent=` ${t.nextDays[e].temp}`,o.src=`https://openweathermap.org/img/wn/${t.nextDays[e].icon}@4x.png`,o.alt=t.nextDays[e].description,i.append(a,r,o)}static displayWeather(t){this.displayMainCard(t),this.displayImgCard(t),this.displaySecondaryCard(t),["tommorow-card","after-tommorow-card","next-card"].forEach(((e,n)=>{this.displayCard(t,n,e)}))}static setBcgColor(t){let e,n=t.temperature;if(n.includes("°F")){const t="metric";n=this.convertTemperature(n,t)}e=parseInt(n,10);e=e>30?30:e,e=e<0?0:e;const i=`hsl(${360-(-7.333333333333333*(30-e)- -360)}, 100%, 75%)`;document.documentElement.style.backgroundColor=i}static setGreyColor(){document.documentElement.style.backgroundColor="hsl(0, 0%, 75%)"}static attachListeners(){const t=document.querySelector("#sample-locations"),e=document.querySelector("#change-units"),n=document.querySelector("#search-box"),i=document.querySelector("#search-btn"),a=document.querySelector("#find-btn");t.addEventListener("click",(t=>this.pickCity(t))),n.addEventListener("submit",(t=>t.preventDefault())),i.addEventListener("click",(()=>this.searchCity())),a.addEventListener("click",(()=>this.findMe())),e.addEventListener("click",(()=>this.toggleUnit(e)))}static runApp(){this.setUnit(),this.attachListeners()}}document.addEventListener("DOMContentLoaded",(()=>i.runApp()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,